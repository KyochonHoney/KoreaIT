정처산기 day 19
Q1901 연습 exponent(int base, int exp) 메서드를 만든다
	이 메서드는 base의 exp승을 리턴합니다.
	아래와 같은 실행결과가 되도록 main() 메서드를
	완성해보세요
	base 입력 : 2
	exp 입력 : 4
	2의 4승 = 16
-------------------------------------------------------
Q1902 고급 hasNine(int number) 메서드를 만든다
	이 메서드는 파라미터로 받은 정수 값이
	숫자 9를 포함하고 있는지의 여부를리턴합니다.
	예를 들어 19, 119, 2397 등은 숫자 9를 포함하고 있어서
	true를 리턴하고, 18, 128,등의 숫자는 false리턴
	-1은 종료 후 9를 포함한 숫자의 합계
	9 + 129 + 1239 = 합계
--------------------------------------------------------
Q1903 첫번째 파라미터로 int형 배열(arr)을
	두번째 파라미터로 int값(key)를 받아서
	그 배열에 그값이 존재하는지 여부를 리턴하는 메서드
	contatins()를 작성해 보세요.
	배열에 그 값이 존재하면 true를 아니면 false를
	리턴하도록 합니다.
	static boolean contains(int[]arr, inkey)
	작성한 contains() 메서드를 테스트하는 코드를
	main()에 적당하게 작성해보세요.
---------------------------------------------------------
Q1904 첫 번째 파라미터로 int형 배열(arr)을
	두 번째 파라미터로 int값(key)을 받아서,
	그 배열에서 그 값의 위치(인덱스) 값을 리턴하는 
	메서드 search()를 작성해 보세요.
	이 메서드는 배열에 그 값이 존재하면 그 인덱스를, 
	존재하지 않으면 -1을 리턴하도록 합니다.
		static int search(int[] arr, int key)
	(실행결과의 예)	배열 arr : [3, 2, 4, 5, 1]         <---- 1~10 난수 발생으로 채운 후 출력.
			값 입력 : 5 (엔터)
			arr[3] = 5
------------------------------------------------------------
Q1905.	두 개의 파라미터로 int형 배열 2개(arr1, arr2)를 받아서,
	두 배열이 완전히 같은지 여부를 리턴하는
	 메서드 equals() 를 작성해 보세요.
		static boolean equals(int[] arr1, int[] arr2)
(실행결과의 예) 배열 arr1 : [3, 2, 4, 5, 1]   <-- 그냥 이렇게 배열을 만들어서 arr1 이라 하세요.
		배열 arr2 : [3, 2, 4, 5, 1]   <-- 그냥 이렇게 배열을 만들어서 arr2 라 하세요. 
		같음.
(실행결과의 예) 배열 arr1 : [3, 2, 4, 5, 1]
		배열 arr2 : [3, 2, 4, 5]
		다름.
(실행결과의 예) 배열 arr1 : [3, 2, 4, 50]
		배열 arr2 : [3, 2, 4, 5]
		다름.
----------	--------------------------------------------------------------
Q1906.	파라미터로 int형 배열 2개를 받아서
	두 배열의 길이가 같다면 두 배열 요소들을 
	모두 교환하는 메서드 swap() 을 작성하세요.
	성공적으로 모든 요소들을 서로 교환했다면 
	true를 리턴하고, 그렇지 않으면 false를 리턴하도록 
	하세요.
		static boolean swap(int[] arr1, int[] arr2)

	(실행결과의 예)	swap전 arr1 : [3, 2, 4, 5] 
			swap전 arr2 : [6, 7, 2, 5] 
			swap 성공!
			swap후 arr1 : [6, 7, 2, 5] 
			swap후 arr2 : [3, 2, 4, 5] 
-----------------------------------------------------------------
고급1.
사이즈가 10인 정수형 배열을 만들고, 
1 이상 100 이하의 정수를 난수발생하여 배열을 채운 후, 
만약에 이 배열이 오름차순으로 구성되어 있으면 
“(___번째 시도) arr = [……]” 형식으로 출력하는데, 
이를 5백만번 반복하세요. 단, 리턴타입이 boolean이고 
파라미터로 정수형 배열을 하나 받는 메서드 isOrder()를 
반드시 정의하세요. 이 메서드는 파라미터로 넘어온 배열이 
오름차순으로 구성되어 있다면 true를, 아니면 false를 리턴하는 
메서드입니다.

(실행결과의 예)
(163522번째 시도) arr = [1, 27, 33, 45, 48, 62, 64, 70, 76, 94]	
(1275192번째 시도) arr = [3, 35, 42, 62, 80, 81, 84, 94, 96, 96]
(1521172번째 시도) arr = [11, 20, 29, 46, 65, 73, 79, 80, 94, 96]
(3876839번째 시도) arr = [4, 6, 27, 54, 66, 71, 83, 87, 90, 91]
(3888780번째 시도) arr = [1, 6, 28, 29, 42, 67, 76, 77, 91, 96]
-------------------------------------------------------------------
고급2.
아래의 메서드들을 만들어서, 잘 만들어졌는지 main()에서 
직접 테스트해보세요.
① 메서드 reverseArray(_______) : 파라미터로 전달된 정수형
 배열의 순서를 뒤집어서 리턴.
테스트 → int[] arr = {3, 7, 2, 5, 4};
arr = reverseArray(arr);
 // arr 출력해서, [4, 5, 2, 7, 3]로 출력되는지 체크!

② 메서드 insertElementToArray(____,____,____) : 파라미터#1로 
전달된 정수형 배열에,
파라미터#2(=인덱스번호) 위치에 파라미터#3(=새로운 값)을 
추가한 배열을 리턴.
테스트 → int[] arr = {3, 7, 2, 5, 4};
 arr = insertElementToArray(arr, 2, 10);
 // arr 출력해서, [3, 7, 10, 2, 5, 4]로 출력되는지 체크!

③ 메서드 deleteElementsFromArray(____,_____) : 파라미터#1로 
전달된 정수형 배열에서
파라미터#2(=삭제할 값) 값을 삭제한 배열을 리턴. (단, 해당하는
 값이 여러 개 있으면 해당하는 값 모두를 삭제하세요.)
테스트 → int[] arr = {3, 7, 2, 2, 4, 2};
 arr = deleteElementsFromArray(arr, 2);
 // arr 출력해서, [3, 7, 4]로 출력되는지 체크!
----------------------------------------------------------------------
고급3.
[완전제곱수(perfect square number)인지 여부를 판단하는 
isPerfectSquare(int num) 메서드] 를 정의하고
 (num이 완전제곱수 이면 true를, 아니면 false를 리턴),
[a부터 b까지의 정수 중 완전제곱수를 모두 출력하는 
showPerfectSquares(int a, int b) 메서드] 를 정의한 후,

아래와 같이 main()을 실행한 결과 완전제곱수(1 4 9 16 25 36 …)가
 출력되도록 코드를 작성하세요.
(완전제곱수는 1, 4, 9, 16, 25, 36, … 등과 같이 
정수의 제곱에 해당하는 수)

main() :
	showPerfectSquares(1, 100); // 1부터 100까지 정수 중 완전제곱수를 출력.
------------------------------------------------------------------------
고급4.
[완전수(perfect number)인지 여부를 판단하는
 isPerfect(int num) 메서드] 를 정의하고
(num이 완전수이면 true를, 아니면 false를 리턴),
[a부터 b까지의 정수 중 완전수를 모두 출력하는 
showPerfects(int a, int b) 메서드] 를 정의한 후,
아래와 같이 main()을 실행한 결과 완전수(6 28 496 8128)가 출력되도록
 코드를 작성하세요. 
(완전수는 6과 같이 자기_자신을_제외한_약수를_다_더한_값 이 
자기자신과 같아지는 수. 예를 들어, 6은 1+2+3이므로 완전수임)

main() :
	showPerfects(1, 10000); // 1부터 10000까지 정수 중 
완전수를 출력.
-------------------------------------------------------------------------
































정처산기 day25

-인스턴스멤버, 클래스멤버
	인스턴스(instance) --> 객체
- 인스턴스멤버 = 인스턴스 변수 + 인스턴스 메서드
	class 영역(static)
	stack 영역(지역변수)  
	Heap 영역(객체)
메서드는 생성하는 것이고
변수는 선언하는 것이다.

스태틱영역은 주소값을 따라가는 게 아닌 새로운 값을
주는 것이라 클래스 내부의 메서드에서 출력하는 게 아닌
새로운 스태틱 메서드에서 주는 것이다
(heap영역으로 가는 것이 아니랄 stack 영역이라 영역이
달라서 서로의 값을 가질 수 없음)

Ex2501 
-객체 안에 인스턴스변수 + 인스턴스메서드.
-클래스 변수 + 클래스메서드 --> 클래스영역에 존재
-인스턴스멤버에서의 접근은 "참조변수"으로
-클래스 멤버에서의 접근은 "클래스"으로 할 수 있음

Ex2502
지역변수 , 클래스변수, 인스턴스변수
지역변수에서는 초기화가 무조건 있어야 되지만
인스턴스변수,클래스변수, 배열은
자동으로 0으로 초기화가 됨.
(String은 null로 초기화)

-클래스멤버에의 접근은 "참조변수"로도 할 수 있음(권장x)
이유 :

Ex2503 클래스의 객체를 생성할 수도 있음

클래스 상속.
	-캡'상'추다
	캡슐화 상속성 추상화 다형성

Ex2504 class 이름 extends (원하는 클래스명)을 쓰면
원하는 클래스 안에 있는 내용들이 새로운 클래스 안으로
다 들어옴
[용어] "부모클래스"(AA클래스) = "상위클래스" = 
	=base class(기본클래스)
        "자식클래스"(AA2클래스) = "하위클래스" =
	=derived class(파생클래스)
문제1.

아래의 두 메서드를 가지는 클래스 Area2를 작성하고, 
아래와 같이 main() 에서 이 객체 하나를 생성해서, 
두 인스턴스 메서드를 호출한 결과를 출력하는 코드를 
작성해보세요.

인스턴스 메서드#1 triangle(int,int) : 삼각형의 넓이를 리턴.
인스턴스 메서드#2 rectangle(int,int) : 사각형의 넓이를 리턴. 

main(): 	Area2 obj = new Area2();
	System.out.println( obj.triangle(3,5) );  // 7.5
	System.out.println ( obj.rectangle(3,5) );  // 15

(실행결과) 	7.5
		15

문제2.

클래스 FourCalculator를 정의하고, 
main()을 적절히 정의하여 아래와 같은 실행결과가 
되도록 코드를 작성해보세요.

class FourCalculator:
	- 인스턴스변수 : int a, b, result
	String op  // 연산의 종류 ("+", "-", "*", "/")
	- 클래스변수 : int count	 // 총 연산횟수
	- 생성자(파라미터 3개) : a, b, op를 초기화
	- 클래스메서드 : showManual()
// 문자열 "+,-,*,/ 등의 사칙연산을 할 수 있는 계산기!"
를 출력.
	- 인스턴스메서드 : doCalc()
// op의 값에 따라 a와 b에 대해 연산하여,
결과 값을 result 변수에
대입함. 그리고 클래스변수 count를 1 증가.
 Ex) a = 2, b = 3, op = "+", count = 0 이면,
doCalc() 실행 결과, result = 5, count = 1 이 됨.

main() :	
- FourCalculator 객체를 3개 생성하고 이들 
객체를 이용해서
	  2+3, 4-5, 6*7 의 결과를 아래와 같이 출력.

(실행결과)	
	클래스 설명 : +,-,*,/ 등의 사칙연산을 
할 수 있는 계산기!
	결과 값 : 5
	결과 값 : -1
	결과 값 : 42
	총 연산횟수 : 3

문제3.

국어, 영어, 수학, 자바의 점수를 입력받고 합계를 구해주는 클래스 Student를 작성하고, 아래의 실행결과와 같이 실행되도록 main() 메서드를 작성해보세요.
	- 필드 : 국어, 영어, 수학, 자바의 점수를 저장할 변수. 
	- 생성자 : 4개의 파라미터로 각 점수를 전달받아서, 필드 값 초기화.
	- 메서드 : getTotal() – 총점을 계산하여 리턴.

(실행결과의 예)	국어 : 70 (엔터)
		영어 : 80 (엔터)
		수학 : 90 (엔터)
		자바 : 100 (엔터)
		총점 : 340



문제4.

클래스 Student를 상속한 클래스 Student2를 작성하고,
 아래의 실행결과와 같이 실행되도록 main() 메서드를 
작성해보세요.
	- 추가 필드 : 이름을 저장할 변수.
	- 생성자 : 5개의 파라미터로 이름과 
각 점수를 전달받아서, 필드 값 초기화.
	- 추가 메서드 : getAverage() – 평균을 계산하여
 리턴. 

(실행결과의 예)	이름 : YG (엔터)
		국어 : 70 (엔터)
		영어 : 80 (엔터)
		수학 : 90 (엔터)
		자바 : 100 (엔터)
		총점 : 340, 평점 : 85.0

문제5.

부모클래스 Person을 상속받는 클래스 Male, Female을 
작성하고, main()가 아래와 같이 실행되도록 main()에서
 Female, Male 객체를 생성하고 각 객체에 대해 
getGender() 메서드를 호출해보세요.
	클래스 Person:
- 메서드 : getGender() – "나도 모르겠음"을 반환.
	클래스 Female:
- 메서드 : getGender() – "여자"를 리턴.    
// '메서드 오버라이딩'
	클래스 Male:
- 메서드 : getGender() – "남자"를 리턴.   
 // '메서드 오버라이딩'

(실행결과)	여자
		남자



문제6.

부모클래스 Shape을 상속받는 클래스 Square를 작성하고,
 아래와 같이 실행되도록 main() 을 작성해보세요.

클래스 Shape:
	- 메서드 : getArea()  // 0을 반환.
클래스 Square:
	- 추가 필드 : int side (한 변의 길이)  
	- 생성자 : 정수 1개를 파라미터로 받아서
 필드 side를 초기화.
	- 메서드 : getArea()   // side*side를
 리턴 (메서드 오버라이딩)	

(실행결과의 예)	한 변의 길이 : 3 (엔터)
		한 변의 길이가 3인 
정사각형의 넓이는 9 입니다.

메서드 오버라이딩(Overriding)
- "부모클래스에 이 메서드가 있지만,
   나는 이 메서드를 새롭게 재정의해서 쓰겠다" 라는 선언.
- (cf) 메서드 오버로딩(Overloading) : "파.개.타."

Ex2206. 
-오버라이딩 하는 메서드 위에 @Override -->
애노테이션(Annotation)
- super 키워드를 사용하면 (오버라이딩 되어 가려져 있던)
메서드를 호출할 수 있음




















